===========
MIDDLEWARE
===========
Docs:
https://expressjs.com/en/guide/writing-middleware.html


Install an own json package 
    ==============================
    npm init -y
    ==============================

install express package and require it, create an app, so we can use express through it.

    ================================
    npm i express 
    ================================
    index.js
    ======================
        const express = require('express');
        const app = express();

install morgan package

    =============================
    npm i morgan
    =============================
    to use it: 
    index.js
    =============================
        app.use(() => {
            console.log("HEy!")
        }) //this allow me to run every code, and every single request
   
   
   *check code to use.app(morgan('tiny)) // as the docs show
    Executing app.use(morgan('tiny')) from command line : 
        $ nodemon index.
        [nodemon] 2.0.9
        [nodemon] to restart at any time, enter `rs`
        [nodemon] watching path(s): *.*
        [nodemon] watching extensions: js,mjs,json
        [nodemon] starting `node index. index.js`
        App is running on localhost:3000
        This is my first middleware!
        GET /dogs 200 3 - 19.825 ms

    Executing 
    app.use(morgan('common'))
    app.use((req, res, next) => {
    console.log('This is my first middleware!')
    next() // if i don't call this, it's going to be the end of the line 
    })
    from command line :    
        [nodemon] restarting due to changes...
        [nodemon] starting `node index. index.js`
        App is running on localhost:3000
        This is my first middleware!
        ::1 - - [09/Jul/2021:02:03:28 +0000] "GET / HTTP/1.1" 304 -

=========================================================
404 Route
=========================================================

To set a 404 route, we must place our route after all we want to execute first.

====================================
password middleware template.
====================================
    this is for every route it's an example.
        app.use((req, res, next) => {
            const { password } = req.query;
            if (password === 'Dabadirabada') {
                next()
            }
            res.send('YOU NEED A PASSWORD')
        })

    but, what we want is to set an specific route, so we can protected it 

    check app.use('/secret)....

========================================
Protecting Specific Routes
========================================

    our app.use(...) for password can be saved in a variable, so it can be called when needed in the routes we want to execute. 
